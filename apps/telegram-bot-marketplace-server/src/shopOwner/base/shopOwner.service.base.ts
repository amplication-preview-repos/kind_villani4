/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, ShopOwner as PrismaShopOwner } from "@prisma/client";

export class ShopOwnerServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ShopOwnerCountArgs, "select">
  ): Promise<number> {
    return this.prisma.shopOwner.count(args);
  }

  async shopOwners(
    args: Prisma.ShopOwnerFindManyArgs
  ): Promise<PrismaShopOwner[]> {
    return this.prisma.shopOwner.findMany(args);
  }
  async shopOwner(
    args: Prisma.ShopOwnerFindUniqueArgs
  ): Promise<PrismaShopOwner | null> {
    return this.prisma.shopOwner.findUnique(args);
  }
  async createShopOwner(
    args: Prisma.ShopOwnerCreateArgs
  ): Promise<PrismaShopOwner> {
    return this.prisma.shopOwner.create(args);
  }
  async updateShopOwner(
    args: Prisma.ShopOwnerUpdateArgs
  ): Promise<PrismaShopOwner> {
    return this.prisma.shopOwner.update(args);
  }
  async deleteShopOwner(
    args: Prisma.ShopOwnerDeleteArgs
  ): Promise<PrismaShopOwner> {
    return this.prisma.shopOwner.delete(args);
  }
}
