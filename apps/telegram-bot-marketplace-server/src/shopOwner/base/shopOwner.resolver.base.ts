/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ShopOwner } from "./ShopOwner";
import { ShopOwnerCountArgs } from "./ShopOwnerCountArgs";
import { ShopOwnerFindManyArgs } from "./ShopOwnerFindManyArgs";
import { ShopOwnerFindUniqueArgs } from "./ShopOwnerFindUniqueArgs";
import { CreateShopOwnerArgs } from "./CreateShopOwnerArgs";
import { UpdateShopOwnerArgs } from "./UpdateShopOwnerArgs";
import { DeleteShopOwnerArgs } from "./DeleteShopOwnerArgs";
import { ShopOwnerService } from "../shopOwner.service";
@graphql.Resolver(() => ShopOwner)
export class ShopOwnerResolverBase {
  constructor(protected readonly service: ShopOwnerService) {}

  async _shopOwnersMeta(
    @graphql.Args() args: ShopOwnerCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ShopOwner])
  async shopOwners(
    @graphql.Args() args: ShopOwnerFindManyArgs
  ): Promise<ShopOwner[]> {
    return this.service.shopOwners(args);
  }

  @graphql.Query(() => ShopOwner, { nullable: true })
  async shopOwner(
    @graphql.Args() args: ShopOwnerFindUniqueArgs
  ): Promise<ShopOwner | null> {
    const result = await this.service.shopOwner(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ShopOwner)
  async createShopOwner(
    @graphql.Args() args: CreateShopOwnerArgs
  ): Promise<ShopOwner> {
    return await this.service.createShopOwner({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ShopOwner)
  async updateShopOwner(
    @graphql.Args() args: UpdateShopOwnerArgs
  ): Promise<ShopOwner | null> {
    try {
      return await this.service.updateShopOwner({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ShopOwner)
  async deleteShopOwner(
    @graphql.Args() args: DeleteShopOwnerArgs
  ): Promise<ShopOwner | null> {
    try {
      return await this.service.deleteShopOwner(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
