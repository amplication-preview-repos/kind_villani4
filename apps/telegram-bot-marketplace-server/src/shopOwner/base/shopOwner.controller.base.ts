/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ShopOwnerService } from "../shopOwner.service";
import { ShopOwnerCreateInput } from "./ShopOwnerCreateInput";
import { ShopOwner } from "./ShopOwner";
import { ShopOwnerFindManyArgs } from "./ShopOwnerFindManyArgs";
import { ShopOwnerWhereUniqueInput } from "./ShopOwnerWhereUniqueInput";
import { ShopOwnerUpdateInput } from "./ShopOwnerUpdateInput";

export class ShopOwnerControllerBase {
  constructor(protected readonly service: ShopOwnerService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ShopOwner })
  async createShopOwner(
    @common.Body() data: ShopOwnerCreateInput
  ): Promise<ShopOwner> {
    return await this.service.createShopOwner({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        username: true,
        email: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ShopOwner] })
  @ApiNestedQuery(ShopOwnerFindManyArgs)
  async shopOwners(@common.Req() request: Request): Promise<ShopOwner[]> {
    const args = plainToClass(ShopOwnerFindManyArgs, request.query);
    return this.service.shopOwners({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        username: true,
        email: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ShopOwner })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async shopOwner(
    @common.Param() params: ShopOwnerWhereUniqueInput
  ): Promise<ShopOwner | null> {
    const result = await this.service.shopOwner({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        username: true,
        email: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ShopOwner })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateShopOwner(
    @common.Param() params: ShopOwnerWhereUniqueInput,
    @common.Body() data: ShopOwnerUpdateInput
  ): Promise<ShopOwner | null> {
    try {
      return await this.service.updateShopOwner({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          username: true,
          email: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ShopOwner })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteShopOwner(
    @common.Param() params: ShopOwnerWhereUniqueInput
  ): Promise<ShopOwner | null> {
    try {
      return await this.service.deleteShopOwner({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          username: true,
          email: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
